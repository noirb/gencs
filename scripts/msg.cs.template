@################################################
@#
@# ROS message code generation for C#
@#
@# EmPy template for generating <msg>.cs files
@#
@################################################
@# Start of Template
@#
@# Context:
@#  - file_name_in (String) Source file
@#  - spec (msggen.MsgSpec) Parsed specification of .msg file
@#  - md5sum (String) MD5Sum of the .msg specification
@################################################
@{
import genmsg.msgs
import gencs
import os.path

cs_namespace = 'ROSBridgeLib.%s.'%(spec.package)
cs_class = '%s'%spec.short_name
cs_full_name = '%s%s'%(cs_namespace, cs_class)
cs_msg_definition = gencs.escape_message_definition(msg_definition)
file_base_name = os.path.basename(file_name_in)
file_ext = os.path.splitext(file_name_in)[1].lower()
}@
// Generated by gencs from @(spec.package)/@(file_base_name)
// DO NOT EDIT THIS FILE BY HAND!

@########################
@# Generic Includes
@########################
using System;
using System.Collections;
using System.Collections.Generic;
using ROSBridgeLib;
using UnityEngine;

@########################
@# Includes for dependencies
@########################
@{
included_packages = []
for field in spec.parsed_fields():
    if (not field.is_builtin):
        if (field.is_header):
            print('using ROSBridgeLib.std_msgs;')
            included_packages.append('std_msgs')
        else:
            (package, name) = genmsg.names.package_resource_name(field.base_type)
            package = package or spec.package
            if (package not in included_packages):
                print('using ROSBridgeLib.%s;'%(package))
                included_packages.append(package)
}@

namespace ROSBridgeLib {
  namespace @(spec.package) {

    [System.Serializable]
@# Ensure service classes inherit from the correct base class
@[if file_ext == ".srv" and spec.short_name.endswith("Request")]@
    public class @(spec.short_name) : ServiceArgs
@[elif file_ext == ".srv" and spec.short_name.endswith("Response")]@
    public class @(spec.short_name) : ServiceResponse
@[else]@
    public class @(spec.short_name) : ROSMessage
@[end if]@
    {
@# Field names
@[for field in spec.parsed_fields()]@
@{cs_type = gencs.msg_type_to_cs(field.type)}@
      public @(cs_type) @(field.name);
@[end for]@

@# Constants
@[for constant in spec.constants]@
      public const @(gencs.msg_type_to_cs(constant.type)) @(constant.name) = @(constant.val);
@[end for]@

@# default constructor
      public @(spec.short_name)()
      {
@# Initial field values
@[for field in spec.parsed_fields()]@
@[if field.is_array]@
        @(field.name) = @(gencs.array_initializer(field.type));
@[elif field.type == 'string']@
        @(field.name) = "";
@[elif field.type in ['byte', 'char', 'bool', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64', 'float32', 'float64']]@
        @(field.name) = @(gencs.default_value(field.type));
@[else]@
        @(field.name) = new @(gencs.msg_type_to_cs(field.type))();
@[end if]@
@[end for]@

      }

@[if len(spec.parsed_fields()) > 0]@
@# constructor
      public @(spec.short_name)(@{
import sys
fields = spec.parsed_fields()
for field in fields:
    sys.stdout.write(gencs.msg_type_to_cs(field.type) + " _" + field.name)
    if fields.index(field) < len(fields)-1:
        sys.stdout.write(", ")

}@ )
      {
@[for field in spec.parsed_fields()]@
        @(field.name) = _@(field.name);
@[end for]@
      }
@[end if]@

      new public static string GetMessageType()
      {
        return "@(spec.package)/@(spec.short_name)";
      }

      new public static string GetMD5Hash()
      {
        return "@(md5sum)";
      }

    } // class @(cs_class)

  } // namespace @(spec.package)

} // namespace ROSBridgeLib
